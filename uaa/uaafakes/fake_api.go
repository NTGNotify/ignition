// Code generated by counterfeiter. DO NOT EDIT.
package uaafakes

import (
	"sync"

	"github.com/pivotalservices/ignition/uaa"
)

type FakeAPI struct {
	UserIDForAccountNameStub        func(a string) (string, error)
	userIDForAccountNameMutex       sync.RWMutex
	userIDForAccountNameArgsForCall []struct {
		a string
	}
	userIDForAccountNameReturns struct {
		result1 string
		result2 error
	}
	userIDForAccountNameReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	CreateUserStub        func(username, origin, externalID, email string) (string, error)
	createUserMutex       sync.RWMutex
	createUserArgsForCall []struct {
		username   string
		origin     string
		externalID string
		email      string
	}
	createUserReturns struct {
		result1 string
		result2 error
	}
	createUserReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAPI) UserIDForAccountName(a string) (string, error) {
	fake.userIDForAccountNameMutex.Lock()
	ret, specificReturn := fake.userIDForAccountNameReturnsOnCall[len(fake.userIDForAccountNameArgsForCall)]
	fake.userIDForAccountNameArgsForCall = append(fake.userIDForAccountNameArgsForCall, struct {
		a string
	}{a})
	fake.recordInvocation("UserIDForAccountName", []interface{}{a})
	fake.userIDForAccountNameMutex.Unlock()
	if fake.UserIDForAccountNameStub != nil {
		return fake.UserIDForAccountNameStub(a)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.userIDForAccountNameReturns.result1, fake.userIDForAccountNameReturns.result2
}

func (fake *FakeAPI) UserIDForAccountNameCallCount() int {
	fake.userIDForAccountNameMutex.RLock()
	defer fake.userIDForAccountNameMutex.RUnlock()
	return len(fake.userIDForAccountNameArgsForCall)
}

func (fake *FakeAPI) UserIDForAccountNameArgsForCall(i int) string {
	fake.userIDForAccountNameMutex.RLock()
	defer fake.userIDForAccountNameMutex.RUnlock()
	return fake.userIDForAccountNameArgsForCall[i].a
}

func (fake *FakeAPI) UserIDForAccountNameReturns(result1 string, result2 error) {
	fake.UserIDForAccountNameStub = nil
	fake.userIDForAccountNameReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) UserIDForAccountNameReturnsOnCall(i int, result1 string, result2 error) {
	fake.UserIDForAccountNameStub = nil
	if fake.userIDForAccountNameReturnsOnCall == nil {
		fake.userIDForAccountNameReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.userIDForAccountNameReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) CreateUser(username string, origin string, externalID string, email string) (string, error) {
	fake.createUserMutex.Lock()
	ret, specificReturn := fake.createUserReturnsOnCall[len(fake.createUserArgsForCall)]
	fake.createUserArgsForCall = append(fake.createUserArgsForCall, struct {
		username   string
		origin     string
		externalID string
		email      string
	}{username, origin, externalID, email})
	fake.recordInvocation("CreateUser", []interface{}{username, origin, externalID, email})
	fake.createUserMutex.Unlock()
	if fake.CreateUserStub != nil {
		return fake.CreateUserStub(username, origin, externalID, email)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.createUserReturns.result1, fake.createUserReturns.result2
}

func (fake *FakeAPI) CreateUserCallCount() int {
	fake.createUserMutex.RLock()
	defer fake.createUserMutex.RUnlock()
	return len(fake.createUserArgsForCall)
}

func (fake *FakeAPI) CreateUserArgsForCall(i int) (string, string, string, string) {
	fake.createUserMutex.RLock()
	defer fake.createUserMutex.RUnlock()
	return fake.createUserArgsForCall[i].username, fake.createUserArgsForCall[i].origin, fake.createUserArgsForCall[i].externalID, fake.createUserArgsForCall[i].email
}

func (fake *FakeAPI) CreateUserReturns(result1 string, result2 error) {
	fake.CreateUserStub = nil
	fake.createUserReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) CreateUserReturnsOnCall(i int, result1 string, result2 error) {
	fake.CreateUserStub = nil
	if fake.createUserReturnsOnCall == nil {
		fake.createUserReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.createUserReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.userIDForAccountNameMutex.RLock()
	defer fake.userIDForAccountNameMutex.RUnlock()
	fake.createUserMutex.RLock()
	defer fake.createUserMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeAPI) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ uaa.API = new(FakeAPI)
