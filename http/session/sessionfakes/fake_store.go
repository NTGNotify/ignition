// Code generated by counterfeiter. DO NOT EDIT.
package sessionfakes

import (
	"net/http"
	"sync"

	"github.com/dghubble/sessions"
)

type FakeStore struct {
	NewStub        func(name string) *sessions.Session
	newMutex       sync.RWMutex
	newArgsForCall []struct {
		name string
	}
	newReturns struct {
		result1 *sessions.Session
	}
	newReturnsOnCall map[int]struct {
		result1 *sessions.Session
	}
	GetStub        func(req *http.Request, name string) (*sessions.Session, error)
	getMutex       sync.RWMutex
	getArgsForCall []struct {
		req  *http.Request
		name string
	}
	getReturns struct {
		result1 *sessions.Session
		result2 error
	}
	getReturnsOnCall map[int]struct {
		result1 *sessions.Session
		result2 error
	}
	SaveStub        func(w http.ResponseWriter, session *sessions.Session) error
	saveMutex       sync.RWMutex
	saveArgsForCall []struct {
		w       http.ResponseWriter
		session *sessions.Session
	}
	saveReturns struct {
		result1 error
	}
	saveReturnsOnCall map[int]struct {
		result1 error
	}
	DestroyStub        func(w http.ResponseWriter, name string)
	destroyMutex       sync.RWMutex
	destroyArgsForCall []struct {
		w    http.ResponseWriter
		name string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeStore) New(name string) *sessions.Session {
	fake.newMutex.Lock()
	ret, specificReturn := fake.newReturnsOnCall[len(fake.newArgsForCall)]
	fake.newArgsForCall = append(fake.newArgsForCall, struct {
		name string
	}{name})
	fake.recordInvocation("New", []interface{}{name})
	fake.newMutex.Unlock()
	if fake.NewStub != nil {
		return fake.NewStub(name)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.newReturns.result1
}

func (fake *FakeStore) NewCallCount() int {
	fake.newMutex.RLock()
	defer fake.newMutex.RUnlock()
	return len(fake.newArgsForCall)
}

func (fake *FakeStore) NewArgsForCall(i int) string {
	fake.newMutex.RLock()
	defer fake.newMutex.RUnlock()
	return fake.newArgsForCall[i].name
}

func (fake *FakeStore) NewReturns(result1 *sessions.Session) {
	fake.NewStub = nil
	fake.newReturns = struct {
		result1 *sessions.Session
	}{result1}
}

func (fake *FakeStore) NewReturnsOnCall(i int, result1 *sessions.Session) {
	fake.NewStub = nil
	if fake.newReturnsOnCall == nil {
		fake.newReturnsOnCall = make(map[int]struct {
			result1 *sessions.Session
		})
	}
	fake.newReturnsOnCall[i] = struct {
		result1 *sessions.Session
	}{result1}
}

func (fake *FakeStore) Get(req *http.Request, name string) (*sessions.Session, error) {
	fake.getMutex.Lock()
	ret, specificReturn := fake.getReturnsOnCall[len(fake.getArgsForCall)]
	fake.getArgsForCall = append(fake.getArgsForCall, struct {
		req  *http.Request
		name string
	}{req, name})
	fake.recordInvocation("Get", []interface{}{req, name})
	fake.getMutex.Unlock()
	if fake.GetStub != nil {
		return fake.GetStub(req, name)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getReturns.result1, fake.getReturns.result2
}

func (fake *FakeStore) GetCallCount() int {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return len(fake.getArgsForCall)
}

func (fake *FakeStore) GetArgsForCall(i int) (*http.Request, string) {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return fake.getArgsForCall[i].req, fake.getArgsForCall[i].name
}

func (fake *FakeStore) GetReturns(result1 *sessions.Session, result2 error) {
	fake.GetStub = nil
	fake.getReturns = struct {
		result1 *sessions.Session
		result2 error
	}{result1, result2}
}

func (fake *FakeStore) GetReturnsOnCall(i int, result1 *sessions.Session, result2 error) {
	fake.GetStub = nil
	if fake.getReturnsOnCall == nil {
		fake.getReturnsOnCall = make(map[int]struct {
			result1 *sessions.Session
			result2 error
		})
	}
	fake.getReturnsOnCall[i] = struct {
		result1 *sessions.Session
		result2 error
	}{result1, result2}
}

func (fake *FakeStore) Save(w http.ResponseWriter, session *sessions.Session) error {
	fake.saveMutex.Lock()
	ret, specificReturn := fake.saveReturnsOnCall[len(fake.saveArgsForCall)]
	fake.saveArgsForCall = append(fake.saveArgsForCall, struct {
		w       http.ResponseWriter
		session *sessions.Session
	}{w, session})
	fake.recordInvocation("Save", []interface{}{w, session})
	fake.saveMutex.Unlock()
	if fake.SaveStub != nil {
		return fake.SaveStub(w, session)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.saveReturns.result1
}

func (fake *FakeStore) SaveCallCount() int {
	fake.saveMutex.RLock()
	defer fake.saveMutex.RUnlock()
	return len(fake.saveArgsForCall)
}

func (fake *FakeStore) SaveArgsForCall(i int) (http.ResponseWriter, *sessions.Session) {
	fake.saveMutex.RLock()
	defer fake.saveMutex.RUnlock()
	return fake.saveArgsForCall[i].w, fake.saveArgsForCall[i].session
}

func (fake *FakeStore) SaveReturns(result1 error) {
	fake.SaveStub = nil
	fake.saveReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeStore) SaveReturnsOnCall(i int, result1 error) {
	fake.SaveStub = nil
	if fake.saveReturnsOnCall == nil {
		fake.saveReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.saveReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeStore) Destroy(w http.ResponseWriter, name string) {
	fake.destroyMutex.Lock()
	fake.destroyArgsForCall = append(fake.destroyArgsForCall, struct {
		w    http.ResponseWriter
		name string
	}{w, name})
	fake.recordInvocation("Destroy", []interface{}{w, name})
	fake.destroyMutex.Unlock()
	if fake.DestroyStub != nil {
		fake.DestroyStub(w, name)
	}
}

func (fake *FakeStore) DestroyCallCount() int {
	fake.destroyMutex.RLock()
	defer fake.destroyMutex.RUnlock()
	return len(fake.destroyArgsForCall)
}

func (fake *FakeStore) DestroyArgsForCall(i int) (http.ResponseWriter, string) {
	fake.destroyMutex.RLock()
	defer fake.destroyMutex.RUnlock()
	return fake.destroyArgsForCall[i].w, fake.destroyArgsForCall[i].name
}

func (fake *FakeStore) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.newMutex.RLock()
	defer fake.newMutex.RUnlock()
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	fake.saveMutex.RLock()
	defer fake.saveMutex.RUnlock()
	fake.destroyMutex.RLock()
	defer fake.destroyMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeStore) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ sessions.Store = new(FakeStore)
