// Code generated by counterfeiter. DO NOT EDIT.
package cloudfoundryfakes

import (
	"net/url"
	"sync"

	"github.com/cloudfoundry-community/go-cfclient"
	"github.com/pivotalservices/ignition/cloudfoundry"
)

type FakeAPI struct {
	ListOrgsByQueryStub        func(query url.Values) ([]cfclient.Org, error)
	listOrgsByQueryMutex       sync.RWMutex
	listOrgsByQueryArgsForCall []struct {
		query url.Values
	}
	listOrgsByQueryReturns struct {
		result1 []cfclient.Org
		result2 error
	}
	listOrgsByQueryReturnsOnCall map[int]struct {
		result1 []cfclient.Org
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAPI) ListOrgsByQuery(query url.Values) ([]cfclient.Org, error) {
	fake.listOrgsByQueryMutex.Lock()
	ret, specificReturn := fake.listOrgsByQueryReturnsOnCall[len(fake.listOrgsByQueryArgsForCall)]
	fake.listOrgsByQueryArgsForCall = append(fake.listOrgsByQueryArgsForCall, struct {
		query url.Values
	}{query})
	fake.recordInvocation("ListOrgsByQuery", []interface{}{query})
	fake.listOrgsByQueryMutex.Unlock()
	if fake.ListOrgsByQueryStub != nil {
		return fake.ListOrgsByQueryStub(query)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.listOrgsByQueryReturns.result1, fake.listOrgsByQueryReturns.result2
}

func (fake *FakeAPI) ListOrgsByQueryCallCount() int {
	fake.listOrgsByQueryMutex.RLock()
	defer fake.listOrgsByQueryMutex.RUnlock()
	return len(fake.listOrgsByQueryArgsForCall)
}

func (fake *FakeAPI) ListOrgsByQueryArgsForCall(i int) url.Values {
	fake.listOrgsByQueryMutex.RLock()
	defer fake.listOrgsByQueryMutex.RUnlock()
	return fake.listOrgsByQueryArgsForCall[i].query
}

func (fake *FakeAPI) ListOrgsByQueryReturns(result1 []cfclient.Org, result2 error) {
	fake.ListOrgsByQueryStub = nil
	fake.listOrgsByQueryReturns = struct {
		result1 []cfclient.Org
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) ListOrgsByQueryReturnsOnCall(i int, result1 []cfclient.Org, result2 error) {
	fake.ListOrgsByQueryStub = nil
	if fake.listOrgsByQueryReturnsOnCall == nil {
		fake.listOrgsByQueryReturnsOnCall = make(map[int]struct {
			result1 []cfclient.Org
			result2 error
		})
	}
	fake.listOrgsByQueryReturnsOnCall[i] = struct {
		result1 []cfclient.Org
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.listOrgsByQueryMutex.RLock()
	defer fake.listOrgsByQueryMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeAPI) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ cloudfoundry.API = new(FakeAPI)
